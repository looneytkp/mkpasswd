#!/bin/bash
# vaultpass - Interactive Password Manager (v1.4+)
set -e

INSTALL_DIR="$HOME/.vaultpass"
CORE_DIR="$INSTALL_DIR/core"
SYSTEM_DIR="$INSTALL_DIR/system"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
LOG_FILE="$SYSTEM_DIR/vaultpass.log"
CHANGELOG_FILE="$INSTALL_DIR/changelog.txt"
VAULT_PY="$CORE_DIR/vault.py"
PASSGEN_PY="$CORE_DIR/password_gen.py"

log_action() {
    mkdir -p "$SYSTEM_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE"
}

require_passphrase_setup() {
    if [ ! -f "$HINT_FILE" ]; then
        echo "[] First run: You must set a master passphrase."
        echo "  - This passphrase protects all your saved passwords."
        echo "  - If you forget it, your passwords cannot be recovered."
        read -p "Enter a passphrase hint (for your eyes only, can be blank): " hint
        mkdir -p "$SYSTEM_DIR"
        echo "$hint" > "$HINT_FILE"
        log_action "Set passphrase hint"
        echo "[] Passphrase hint saved."
    fi
    if [ -f "$HINT_FILE" ]; then
        echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")"
    fi
}

LAST_UPDATE_FILE="$SYSTEM_DIR/.last_update_check"
NEED_UPDATE=0
if [ -f "$LAST_UPDATE_FILE" ]; then
    last=$(date -r "$LAST_UPDATE_FILE" +%s)
    now=$(date +%s)
    diff=$(( (now - last) / 86400 ))
    [ "$diff" -ge 7 ] && NEED_UPDATE=1
else
    NEED_UPDATE=1
fi

if [ "$NEED_UPDATE" -eq 1 ]; then
    echo "[] Checking for vaultpass updates..."
    (cd "$INSTALL_DIR" && git fetch origin main && git remote update > /dev/null 2>&1)
    local_commit=$(cd "$INSTALL_DIR" && git rev-parse HEAD)
    remote_commit=$(cd "$INSTALL_DIR" && git rev-parse origin/main)
    if [ "$local_commit" != "$remote_commit" ]; then
        echo "[!] New version available!"
        echo "[!] Currently installed: $local_commit"
        echo "[!] Latest: $remote_commit"
        echo "[] Changelog for latest version:"
        cat "$CHANGELOG_FILE" | head -20
        read -p "Do you want to update now? (Y/n): " u
        if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then
            (cd "$INSTALL_DIR" && git pull origin main)
            echo "[âœ”] vaultpass updated."
            log_action "vaultpass updated via auto-check"
        fi
    fi
    touch "$LAST_UPDATE_FILE"
fi

show_help() {
    cat <<EOF
vaultpass - Secure Password Manager
Usage: vaultpass [OPTIONS]
Options:
  -l [ID ...]         Generate long password(s)
  -s [ID ...]         Generate short password(s)
  -c [ID ...]         Enter custom password(s)
  -L                  List all saved passwords
  -S [ID ...]         Search by ID
  -d [ID ...]         Delete by ID
  -e [ID]             Edit username/email
  -b                  Backup vault
  -r                  Restore from backup
  --change-passphrase Change master passphrase
  --log               View action log
  --update            Check for updates
  -h, --help          Show help
  -a                  Show all functions
  -c, --changelog     View changelog
EOF
}

show_all_functions() {
    cat <<EOF
Vaultpass Features:
- Generate and store passwords
- Add username/email and optional info
- Edit saved entries
- List, search, delete entries
- Encrypt/decrypt with GPG and passphrase
- Backup and restore vault
- Auto-update with changelog
- Action logging
EOF
}

backup_passwords() {
    require_passphrase_setup
    mkdir -p "$INSTALL_DIR/backup"
    cp "$PASS_FILE" "$INSTALL_DIR/backup/passwords_$(date +%Y%m%d_%H%M%S).gpg"
    echo "[*] Backup saved to $INSTALL_DIR/backup"
    log_action "Vault backup"
}

restore_passwords() {
    require_passphrase_setup
    echo "[] Backups found:"
    ls "$INSTALL_DIR/backup"/*.gpg 2>/dev/null || { echo "No backups found."; return; }
    read -p "Enter backup filename to restore: " f
    cp "$INSTALL_DIR/backup/$f" "$PASS_FILE"
    echo "[âœ”] Restored vault from backup."
    log_action "Vault restored from $f"
}

edit_entry() {
    require_passphrase_setup
    ID="$2"
    if [ -z "$ID" ]; then echo "Usage: vaultpass -e ID"; exit 1; fi
    python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
    if grep -qw "$ID:" "$PASS_FILE.tmp"; then
        entry=$(grep -w "$ID:" "$PASS_FILE.tmp")
        old_user=$(echo "$entry" | awk -F'|' '{print $2}')
        echo "Current username/email: $old_user"
        read -p "Enter new username/email: " new_user
        sed -i "s|^$ID:[^|]*|$ID:|$new_user|" "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        rm "$PASS_FILE.tmp"
        echo "[âœ”] Username/email updated for $ID."
        log_action "Edited $ID"
    else
        echo "[X] ID not found."
        rm "$PASS_FILE.tmp"
    fi
}

change_passphrase() {
    require_passphrase_setup
    echo "[] To change passphrase, you must enter the current passphrase."
    python3 "$VAULT_PY" verify "$PASS_FILE"
    echo "[] Verified. Now setting new passphrase..."
    python3 "$VAULT_PY" change_passphrase "$PASS_FILE"
    log_action "Passphrase changed"
}

update_vaultpass() {
    (cd "$INSTALL_DIR" && git fetch origin main && git remote update > /dev/null 2>&1)
    local_commit=$(cd "$INSTALL_DIR" && git rev-parse HEAD)
    remote_commit=$(cd "$INSTALL_DIR" && git rev-parse origin/main)
    if [ "$local_commit" != "$remote_commit" ]; then
        echo "[!] New version available!"
        echo "[] Updating..."
        (cd "$INSTALL_DIR" && git pull origin main)
        echo "[âœ”] vaultpass updated."
        log_action "vaultpass updated manually"
    else
        echo "[*] vaultpass is up to date."
    fi
    exit 0
}

uninstall() {
    echo "[*] Uninstalling vaultpass..."
    if [ -f "$PASS_FILE" ]; then
        read -p "Backup your vault before uninstalling? (Y/n): " b
        [[ "$b" =~ ^[Yy]$ || -z "$b" ]] && backup_passwords
    fi
    read -p "Delete all vaultpass files? (Y/n): " conf
    if [[ "$conf" =~ ^[Yy]$ || -z "$conf" ]]; then
        rm -rf "$INSTALL_DIR"
        rm -f "$BIN_PATH"
        echo "[âœ”] vaultpass removed."
        log_action "Uninstalled vaultpass"
    else
        echo "Uninstall cancelled."
    fi
    exit 0
}

list_passwords() {
    require_passphrase_setup
    python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
    cat -n "$PASS_FILE.tmp"
    rm "$PASS_FILE.tmp"
    log_action "Listed all passwords"
}

search_passwords() {
    require_passphrase_setup
    shift
    for ID in "$@"; do
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        entry=$(grep -w "$ID:" "$PASS_FILE.tmp" || echo "ID $ID not found")
        echo "$entry"
        rm "$PASS_FILE.tmp"
        log_action "Searched for $ID"
    done
}

delete_passwords() {
    require_passphrase_setup
    shift
    for ID in "$@"; do
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        grep -vw "$ID:" "$PASS_FILE.tmp" > "$PASS_FILE.tmp2"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp2" "$PASS_FILE"
        rm "$PASS_FILE.tmp" "$PASS_FILE.tmp2"
        echo "[âœ”] Deleted $ID."
        log_action "Deleted $ID"
    done
}

generate_passwords() {
    require_passphrase_setup
    mode="$1"; shift
    for ID in "$@"; do
        case "$mode" in
            -l) pwd=$(python3 "$PASSGEN_PY" long) ;;
            -s) pwd=$(python3 "$PASSGEN_PY" short) ;;
            -c)
                read -p "Enter custom password for $ID: " pwd
                ;;
        esac
        read -p "Enter username/email (optional): " user
        read -p "Enter info/description (optional): " info
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        echo "$ID:|$user|$pwd|$info" >> "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        rm "$PASS_FILE.tmp"
        echo "[âœ”] Saved password for $ID."
        log_action "Saved $ID"
    done
}

case "$1" in
    -h|--help) show_help ;;
    -a) show_all_functions ;;
    -c|--changelog) cat "$CHANGELOG_FILE" ;;
    --log) cat "$LOG_FILE" ;;
    -b) backup_passwords ;;
    -r) restore_passwords ;;
    -e) edit_entry "$@" ;;
    -L) list_passwords ;;
    -S) search_passwords "$@" ;;
    -d) delete_passwords "$@" ;;
    -l|-s|-c) generate_passwords "$@" ;;
    --change-passphrase) change_passphrase ;;
    --update) update_vaultpass ;;
    -u) uninstall ;;
    *) show_help ;;
esac

exit 0