#!/bin/bash

#vaultpass - Interactive Password Manager (v1.4+)

set -e

INSTALL_DIR="$HOME/.vaultpass" CORE_DIR="$INSTALL_DIR/core" SYSTEM_DIR="$INSTALL_DIR/system" PASS_FILE="$SYSTEM_DIR/passwords.gpg" HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt" LOG_FILE="$SYSTEM_DIR/vaultpass.log" CHANGELOG_FILE="$INSTALL_DIR/changelog.txt" VAULT_PY="$CORE_DIR/vault.py" PASSGEN_PY="$CORE_DIR/password_gen.py"

Functions for logging

log_action() { mkdir -p "$SYSTEM_DIR" echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE" }

Check for all required files

missing=0 for f in "$VAULT_PY" "$PASSGEN_PY" "$CHANGELOG_FILE"; do [ -f "$f" ] || { echo "[X] Missing required file: $f"; missing=1; } done if [ $missing -eq 1 ]; then echo "[!] vaultpass is missing required files." read -p "Do you want to reinstall vaultpass now? (Y/n): " rein if [[ "$rein" =~ ^[Yy]$ || -z "$rein" ]]; then bash <(curl -fsSL https://raw.githubusercontent.com/looneytkp/vaultpass/main/install/install.sh) exit 0 else exit 1 fi fi

Ask for passphrase only if needed

require_passphrase() { if [ ! -f "$HINT_FILE" ]; then echo "[] First run: You must set a master passphrase." echo "  - This passphrase protects all your saved passwords." echo "  - If you forget it, your passwords cannot be recovered." read -p "Enter a passphrase hint (for your eyes only, can be blank): " hint if [ -z "$hint" ]; then echo "[!] Warning: You are setting an empty passphrase. This is not secure." fi mkdir -p "$SYSTEM_DIR" echo "$hint" > "$HINT_FILE" log_action "Set passphrase hint" echo "[] Passphrase hint saved." fi echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")" }

Weekly update check

LAST_UPDATE_FILE="$SYSTEM_DIR/.last_update_check" NEED_UPDATE=0 if [ -f "$LAST_UPDATE_FILE" ]; then last=$(date -r "$LAST_UPDATE_FILE" +%s) now=$(date +%s) diff=$(( (now - last) / 86400 )) [ "$diff" -ge 7 ] && NEED_UPDATE=1 else NEED_UPDATE=1 fi if [ "$NEED_UPDATE" -eq 1 ]; then echo "[] Checking for vaultpass updates..." (cd "$INSTALL_DIR" && git fetch origin main && git remote update > /dev/null 2>&1) local_commit=$(cd "$INSTALL_DIR" && git rev-parse HEAD) remote_commit=$(cd "$INSTALL_DIR" && git rev-parse origin/main) if [ "$local_commit" != "$remote_commit" ]; then echo "[!] New version available!" echo "[!] Currently installed: $local_commit" echo "[!] Latest: $remote_commit" echo "[] Changelog for latest version:" cat "$CHANGELOG_FILE" | head -20 read -p "Do you want to update now? (Y/n): " u if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then (cd "$INSTALL_DIR" && git pull origin main) echo "[âœ”] vaultpass updated." log_action "vaultpass updated via auto-check" fi fi touch "$LAST_UPDATE_FILE" fi

Command line functions

show_help() { cat <<EOF vaultpass - Secure Password Manager Usage: vaultpass [OPTIONS] Options: -l [ID ...]        Generate long password(s) -s [ID ...]        Generate short password(s) -c [ID ...]        Generate custom password(s) -L                 List all saved passwords -S [ID ...]        Search for passwords by ID -d [ID ...]        Delete password(s) by ID -e [ID ...]        Edit username/email for entry -b                 Backup passwords -r                 Restore from backup -u                 Uninstall vaultpass --change-passphrase Change your master passphrase -a                 Show all functions -h, --help         Show this help -c, --changelog    View changelog --log              View activity log --update           Check for updates EOF }

change_passphrase() { require_passphrase read -sp "Enter current passphrase: " current echo if ! echo "test" | gpg --batch --yes --passphrase "$current" -c -o /dev/null 2>/dev/null; then echo "[X] Incorrect current passphrase." exit 1 fi read -sp "Enter new passphrase: " new1; echo read -sp "Confirm new passphrase: " new2; echo [ "$new1" != "$new2" ] && { echo "[X] Passphrases do not match."; exit 1; } echo "[âœ”] Passphrase changed." log_action "Passphrase changed" }

Main command parser

case "$1" in -h|--help) show_help ;; -a) echo "Vaultpass Functions: ..." ;; -c|--changelog) cat "$CHANGELOG_FILE" ;; --log) cat "$LOG_FILE" ;; -b) mkdir -p "$INSTALL_DIR/backup"; cp "$PASS_FILE" "$HINT_FILE" "$INSTALL_DIR/backup/" ;; -r) cp "$INSTALL_DIR/backup/passwords.gpg" "$PASS_FILE"; cp "$INSTALL_DIR/backup/passphrase_hint.txt" "$HINT_FILE" ;; -u) echo "Uninstalling..."; rm -rf "$INSTALL_DIR" ;; --update) echo "Checking update..." ;; --change-passphrase) change_passphrase ;; -L|-S|-d|-l|-s|-c|-e) require_passphrase; echo "[Action] $1 invoked with passphrase check." ;; *) show_help ;; esac

exit 0

