#!/bin/bash
# vaultpass - Interactive Password Manager v1.4+
set -e

INSTALL_DIR="$HOME/.vaultpass"
CORE_DIR="$INSTALL_DIR/core"
SYSTEM_DIR="$INSTALL_DIR/system"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
LOG_FILE="$SYSTEM_DIR/vaultpass.log"
CHANGELOG_FILE="$INSTALL_DIR/changelog.txt"
VAULT_PY="$CORE_DIR/vault.py"
PASSGEN_PY="$CORE_DIR/password_gen.py"

log_action() {
    mkdir -p "$SYSTEM_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE"
}

# Check for all required files
missing=0
for f in "$VAULT_PY" "$PASSGEN_PY" "$CHANGELOG_FILE"; do
    [ -f "$f" ] || { echo "[X] Missing required file: $f"; missing=1; }
done
if [ $missing -eq 1 ]; then
    echo "[!] vaultpass is missing required files."
    read -p "Do you want to reinstall vaultpass now? (Y/n): " rein
    if [[ "$rein" =~ ^[Yy]$ || -z "$rein" ]]; then
        bash <(curl -fsSL https://raw.githubusercontent.com/looneytkp/vaultpass/main/install/setup.sh)
        exit 0
    else
        exit 1
    fi
fi

setup_passphrase() {
    echo "[*] First run: Set your master passphrase."
    echo "  - This passphrase secures all your passwords."
    echo "  - If you forget it, your passwords are unrecoverable."
    mkdir -p "$SYSTEM_DIR"
    read -p "Enter a passphrase hint (can be blank): " hint
    echo "$hint" > "$HINT_FILE"
    log_action "Set passphrase hint"
}

if [ ! -f "$HINT_FILE" ]; then
    setup_passphrase
fi

if [ -f "$HINT_FILE" ]; then
    echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")"
fi

# Weekly update check
LAST_UPDATE_FILE="$SYSTEM_DIR/.last_update_check"
NEED_UPDATE=0
if [ -f "$LAST_UPDATE_FILE" ]; then
    last=$(date -r "$LAST_UPDATE_FILE" +%s)
    now=$(date +%s)
    diff=$(( (now - last) / 86400 ))
    [ "$diff" -ge 7 ] && NEED_UPDATE=1
else
    NEED_UPDATE=1
fi
if [ "$NEED_UPDATE" -eq 1 ]; then
    echo "[*] Checking for vaultpass updates..."
    (cd "$INSTALL_DIR" && git fetch origin main && git remote update > /dev/null 2>&1)
    local_commit=$(cd "$INSTALL_DIR" && git rev-parse HEAD)
    remote_commit=$(cd "$INSTALL_DIR" && git rev-parse origin/main)
    if [ "$local_commit" != "$remote_commit" ]; then
        echo "[!] New version available!"
        echo "[!] Currently installed: $local_commit"
        echo "[!] Latest: $remote_commit"
        echo "[*] Changelog:"
        head -20 "$CHANGELOG_FILE"
        read -p "Update now? (Y/n): " u
        if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then
            (cd "$INSTALL_DIR" && git pull origin main)
            echo "[âœ”] vaultpass updated."
            log_action "vaultpass updated via auto-check"
        fi
    fi
    touch "$LAST_UPDATE_FILE"
fi

# Command line options
show_help() {
    cat <<EOF
vaultpass - Secure Password Manager
Usage: vaultpass [OPTIONS]
Options:
  -l [ID]      Generate long password
  -s [ID]      Generate short password
  -c [ID]      Generate custom password
  -L           List saved passwords (requires passphrase)
  -S [ID]      Search password by ID
  -d [ID]      Delete password by ID
  -e [ID]      Edit username/email
  -u           Uninstall vaultpass
  -b           Backup passwords
  -r           Restore from backup
  --update     Check for updates
  --log        View log
  --changelog  View changelog
  --change-passphrase  Change master passphrase
  -a           Show all features
  -h, --help   Show help
EOF
}

require_passphrase() {
    echo "[*] Please enter your passphrase to proceed:"
    read -s pass
    echo "$pass" > "$SYSTEM_DIR/.current_pass"
}

case "$1" in
    -h|--help) show_help ;;
    --log) cat "$LOG_FILE" ;;
    --changelog) cat "$CHANGELOG_FILE" ;;
    -a) show_help ;;
    -u)
        echo "[*] Uninstalling vaultpass..."
        if [ -f "$PASS_FILE" ]; then
            read -p "Backup before uninstalling? (Y/n): " b
            [[ "$b" =~ ^[Yy]$ || -z "$b" ]] && cp "$PASS_FILE" "$INSTALL_DIR/backup/passwords_backup_$(date +%Y%m%d%H%M).gpg"
        fi
        rm -rf "$INSTALL_DIR"
        rm -f "$BIN_PATH"
        log_action "vaultpass uninstalled"
        echo "[âœ”] Uninstalled."
        ;;
    --update)
        echo "[*] Checking for updates manually..."
        (cd "$INSTALL_DIR" && git fetch origin main)
        if ! git diff --quiet HEAD origin/main; then
            echo "[*] Update available."
            head -20 "$CHANGELOG_FILE"
            read -p "Update now? (Y/n): " yn
            [[ "$yn" =~ ^[Yy]$ || -z "$yn" ]] && (cd "$INSTALL_DIR" && git pull origin main)
            echo "[âœ”] Updated."
        else
            echo "[*] Already up to date."
        fi
        ;;
    --change-passphrase)
        require_passphrase
        echo "[*] Changing passphrase."
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        rm "$PASS_FILE.tmp"
        echo "[âœ”] Passphrase changed."
        log_action "Passphrase changed"
        ;;
    -L)
        require_passphrase
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        cat -n "$PASS_FILE.tmp"
        rm "$PASS_FILE.tmp"
        ;;
    *) show_help ;;
esac

exit 0