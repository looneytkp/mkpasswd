#!/bin/bash

# vaultpass - Interactive Password Manager (v1.4+)
set -e

INSTALL_DIR="$HOME/.vaultpass"
CORE_DIR="$INSTALL_DIR/core"
SYSTEM_DIR="$INSTALL_DIR/system"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
LOG_FILE="$SYSTEM_DIR/vaultpass.log"
CHANGELOG_FILE="$INSTALL_DIR/changelog.txt"
VAULT_PY="$CORE_DIR/vault.py"
PASSGEN_PY="$CORE_DIR/password_gen.py"

log_action() {
    mkdir -p "$SYSTEM_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE"
}

require_passphrase_setup() {
    if [ ! -f "$HINT_FILE" ]; then
        echo "[] First run: You must set a master passphrase."
        echo "  - This passphrase protects all your saved passwords."
        echo "  - If you forget it, your passwords cannot be recovered."
        read -p "Enter a passphrase hint (can be blank): " hint
        mkdir -p "$SYSTEM_DIR"
        echo "$hint" > "$HINT_FILE"
        log_action "Set passphrase hint"
        echo "[] Passphrase hint saved."
    fi
    echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")"
}

update_vaultpass() {
    echo "[] Checking for vaultpass updates..."
    (cd "$INSTALL_DIR" && git fetch origin main && git remote update > /dev/null 2>&1)
    local_commit=$(cd "$INSTALL_DIR" && git rev-parse HEAD)
    remote_commit=$(cd "$INSTALL_DIR" && git rev-parse origin/main)
    if [ "$local_commit" != "$remote_commit" ]; then
        echo "[!] New version available!"
        echo "[*] Changelog:"
        head -20 "$CHANGELOG_FILE"
        read -p "Do you want to update now? (Y/n): " u
        if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then
            (cd "$INSTALL_DIR" && git pull origin main)
            echo "[âœ”] vaultpass updated."
            log_action "vaultpass updated"
        fi
    else
        echo "[*] vaultpass is already up to date."
    fi
}

uninstall() {
    echo "[*] Uninstalling vaultpass..."
    if [ -f "$PASS_FILE" ]; then
        read -p "Do you want to backup your vault first? (Y/n): " b
        [[ "$b" =~ ^[Yy]$ || -z "$b" ]] && backup_passwords
    fi
    read -p "Remove all vaultpass files? (Y/n): " c
    if [[ "$c" =~ ^[Yy]$ || -z "$c" ]]; then
        rm -rf "$INSTALL_DIR"
        rm -f "$BIN_PATH"
        echo "[âœ”] vaultpass uninstalled."
        log_action "Uninstalled vaultpass"
    fi
    exit 0
}

show_help() {
    cat <<EOF
vaultpass - Secure Password Manager

Usage: vaultpass [OPTIONS]
Options:
  -l [ID ...]        Generate long password(s)
  -s [ID ...]        Generate short password(s)
  -c [ID ...]        Save custom password(s)
  -L                 List all saved passwords
  -S [ID ...]        Search saved passwords
  -d [ID ...]        Delete password(s)
  -e [ID ...]        Edit username/email
  -u                 Uninstall vaultpass
  -b                 Backup vault
  -r                 Restore vault
  --change-passphrase  Change master passphrase
  --log              Show activity log
  --update           Check for updates
  -h, --help         Show this help
  -a                 Show all functions
EOF
}

show_all_functions() {
    cat <<EOF
Vaultpass Functions:
- Generate secure passwords (short, long)
- Save custom passwords
- Store username/email with entries
- Search, list, delete, and edit entries
- Backup and restore vault
- Changelog & update checker
- Detailed logging
EOF
}

backup_passwords() {
    mkdir -p "$INSTALL_DIR/backup"
    cp "$PASS_FILE" "$INSTALL_DIR/backup/passwords_$(date +%Y%m%d_%H%M%S).gpg"
    cp "$HINT_FILE" "$INSTALL_DIR/backup/hint_$(date +%Y%m%d_%H%M%S).txt"
    echo "[*] Backup created."
    log_action "Vault backed up"
}

restore_passwords() {
    echo "[*] Available backups:"
    ls "$INSTALL_DIR/backup"/*.gpg 2>/dev/null || { echo "No backups found."; return; }
    read -p "Enter backup filename: " f
    cp "$INSTALL_DIR/backup/$f" "$PASS_FILE"
    echo "[âœ”] Vault restored from backup."
    log_action "Vault restored: $f"
}

edit_entry() {
    ID="$2"
    [ -z "$ID" ] && echo "Usage: vaultpass -e ID" && exit 1
    python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
    if grep -qw "$ID:" "$PASS_FILE.tmp"; then
        old_user=$(grep -w "$ID:" "$PASS_FILE.tmp" | awk -F'|' '{print $2}')
        echo "Current username/email: $old_user"
        read -p "Enter new username/email: " new_user
        sed -i "s|^$ID:[^|]*|$ID:|$new_user|" "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        echo "[âœ”] Username/email updated for $ID."
        log_action "Edited $ID"
    else
        echo "[X] ID not found."
    fi
    rm "$PASS_FILE.tmp"
}

change_passphrase() {
    echo "[*] Changing passphrase (current required)"
    python3 "$VAULT_PY" verify "$PASS_FILE"
    python3 "$VAULT_PY" change_passphrase "$PASS_FILE"
    log_action "Changed passphrase"
}

# Main switch
case "$1" in
    -h|--help) show_help ;;
    -a) show_all_functions ;;
    -c) shift
        for ID in "$@"; do
            read -s -p "Enter password for $ID: " custom_pwd
            echo
            read -p "Enter username/email for $ID (optional): " user
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$custom_pwd" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ”] Saved custom password for $ID."
            log_action "Saved custom password for $ID"
        done ;;
    -l|-s)
        require_passphrase_setup
        shift
        mode="short"
        [ "$1" = "-l" ] && mode="long"
        for ID in "$@"; do
            pwd=$(python3 "$PASSGEN_PY" $mode)
            echo "Generated password for $ID: $pwd"
            read -p "Enter username/email (optional): " user
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$pwd" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ”] Saved password for $ID."
            log_action "Saved password for $ID"
        done ;;
    -L)
        require_passphrase_setup
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        cat -n "$PASS_FILE.tmp"
        rm "$PASS_FILE.tmp"
        log_action "Listed passwords"
        ;;
    -S)
        require_passphrase_setup
        shift; for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            grep -w "$ID:" "$PASS_FILE.tmp" || echo "ID $ID not found"
            rm "$PASS_FILE.tmp"
            log_action "Searched for $ID"
        done ;;
    -d)
        require_passphrase_setup
        shift; for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            grep -vw "$ID:" "$PASS_FILE.tmp" > "$PASS_FILE.tmp2"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp2" "$PASS_FILE"
            rm "$PASS_FILE.tmp" "$PASS_FILE.tmp2"
            echo "[âœ”] Deleted $ID."
            log_action "Deleted $ID"
        done ;;
    -e) require_passphrase_setup; edit_entry "$@" ;;
    -b) require_passphrase_setup; backup_passwords ;;
    -r) require_passphrase_setup; restore_passwords ;;
    --change-passphrase) require_passphrase_setup; change_passphrase ;;
    --log) cat "$LOG_FILE" ;;
    --update) update_vaultpass ;;
    -u) uninstall ;;
    *) show_help ;;
esac

exit 0