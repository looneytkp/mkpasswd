#!/bin/bash

# vaultpass - Interactive Password Manager (v1.5)

set -e

INSTALL_DIR="$HOME/.vaultpass"
CORE_DIR="$INSTALL_DIR/core"
SYSTEM_DIR="$INSTALL_DIR/system"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
LOG_FILE="$SYSTEM_DIR/vaultpass.log"
CHANGELOG_FILE="$INSTALL_DIR/changelog.txt"
VERSION_FILE="$INSTALL_DIR/version.txt"
REMOTE_VERSION_URL="https://raw.githubusercontent.com/looneytkp/vaultpass/main/version.txt"
VAULT_PY="$CORE_DIR/vault.py"
PASSGEN_PY="$CORE_DIR/password_gen.py"

log_action() {
    mkdir -p "$SYSTEM_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE"
}

require_passphrase_setup() {
    if [ ! -f "$HINT_FILE" ]; then
        echo "[*] First run: You must set a master passphrase."
        echo "  - This passphrase protects all your saved passwords."
        echo "  - If you forget it, your passwords cannot be recovered."
        read -p "Enter a passphrase hint (for your eyes only, can be blank): " hint
        mkdir -p "$SYSTEM_DIR"
        echo "$hint" > "$HINT_FILE"
        log_action "Set passphrase hint"
        echo "[*] Passphrase hint saved."
    fi

    if [ -f "$HINT_FILE" ]; then
        echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")"
    fi
}

show_latest_changelog() {
    ver="${1#v}"  # Remove any 'v' prefix
    # Show only the block for the requested version (up to next Version or EOF)
    awk "/^Version[[:space:]]*$ver/,/^Version[[:space:]]*[0-9]+\.[0-9]+/" "$CHANGELOG_FILE" | sed '$d'
}

check_for_updates() {
    LAST_UPDATE_FILE="$SYSTEM_DIR/.last_update_check"
    NEED_UPDATE=0
    VERSION_FILE="$INSTALL_DIR/version.txt"
    REMOTE_VERSION_URL="https://raw.githubusercontent.com/looneytkp/vaultpass/main/version.txt"

    # Ensure local version.txt exists (fallback v1.5 if missing)
    [ -f "$VERSION_FILE" ] || echo "v1.5" > "$VERSION_FILE"

    if [ -f "$LAST_UPDATE_FILE" ]; then
        last=$(date -r "$LAST_UPDATE_FILE" +%s)
        now=$(date +%s)
        diff=$(( (now - last) / 86400 ))
        [ "$diff" -ge 7 ] && NEED_UPDATE=1
    else
        NEED_UPDATE=1
    fi

    if [ "$NEED_UPDATE" -eq 1 ]; then
        echo "[*] Checking for vaultpass updates..."
        local_version=$(cat "$VERSION_FILE")
        remote_version=$(curl -fsSL "$REMOTE_VERSION_URL" 2>/dev/null || echo "$local_version")
        if [ "$local_version" != "$remote_version" ]; then
            echo "[!] New version available!"
            echo "[!] Currently installed: $local_version"
            echo "[!] Latest: $remote_version"
            echo "[*] Changelog for latest version:"
            show_latest_changelog "$remote_version"
            read -p "Do you want to update now? (Y/n): " u
            if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then
                (cd "$INSTALL_DIR" && git pull origin main)
                echo "$remote_version" > "$VERSION_FILE"
                echo "[âœ”] vaultpass updated to $remote_version."
                log_action "vaultpass updated to $remote_version"
            fi
        fi
        touch "$LAST_UPDATE_FILE"
    fi
}

show_help() {
    cat <<EOF
vaultpass - Secure Password Manager
Usage: vaultpass [OPTIONS]
Options:
  -l [ID ...]        Generate long password(s)
  -s [ID ...]        Generate short password(s)
  -c [ID ...]        Save custom password(s)
  -L                 List all saved passwords
  -S [ID ...]        Search for passwords by ID
  -d [ID ...]        Delete password(s) by ID
  -e [ID]            Edit username/email
  --change-passphrase Change master passphrase
  -b                 Backup passwords
  -r                 Restore from backup
  --log              Show action log
  --update           Check for updates now
  -a                 Show all features
  -h, --help         Show this help
  --changelog        Show latest changelog
EOF
}

show_features() {
    cat <<EOF
Vaultpass Functions:
- Generate secure passwords (short, long, or custom)
- Save username/email with each password
- Add optional 'info' field (e.g. what the password is for)
- View, search, delete, or edit saved passwords
- Backup and restore encrypted vaults
- Weekly auto-update via Git
- Full logging and changelog display
EOF
}

show_changelog() {
    # Show just the latest block, not the whole file
    local ver
    ver=$(cat "$VERSION_FILE")
    echo "Latest Changelog:"
    show_latest_changelog "$ver"
    echo "Full changelog: https://github.com/looneytkp/vaultpass"
}

show_log() {
    cat "$LOG_FILE"
}

backup_passwords() {
    require_passphrase_setup
    mkdir -p "$INSTALL_DIR/backup"
    cp "$PASS_FILE" "$INSTALL_DIR/backup/passwords_$(date +%Y%m%d_%H%M%S).gpg"
    cp "$HINT_FILE" "$INSTALL_DIR/backup/passphrase_hint.txt"
    echo "[*] Backup saved to $INSTALL_DIR/backup"
    log_action "Vault backup"
}

restore_passwords() {
    require_passphrase_setup
    echo "[*] Backups found:"
    ls "$INSTALL_DIR/backup"/*.gpg 2>/dev/null || { echo "No backups found."; return; }
    read -p "Enter backup filename to restore: " f
    cp "$INSTALL_DIR/backup/$f" "$PASS_FILE"
    [ -f "$INSTALL_DIR/backup/passphrase_hint.txt" ] && cp "$INSTALL_DIR/backup/passphrase_hint.txt" "$HINT_FILE"
    echo "[âœ”] Restored vault from backup."
    log_action "Vault restored from $f"
}

edit_entry() {
    require_passphrase_setup
    ID="$2"
    [ -z "$ID" ] && echo "Usage: vaultpass -e ID" && exit 1
    python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
    if grep -qw "$ID:" "$PASS_FILE.tmp"; then
        entry=$(grep -w "$ID:" "$PASS_FILE.tmp")
        old_user=$(echo "$entry" | awk -F'|' '{print $2}')
        echo "Current username/email: $old_user"
        read -p "Enter new username/email: " new_user
        sed -i "s|^$ID:[^|]*|$ID:|$new_user|" "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        rm "$PASS_FILE.tmp"
        echo "[âœ”] Username/email updated for $ID."
        log_action "Edited entry for $ID"
    else
        echo "[X] ID not found."
        rm "$PASS_FILE.tmp"
    fi
}

change_passphrase() {
    require_passphrase_setup
    echo "[*] To change passphrase, enter current passphrase."
    python3 "$VAULT_PY" verify "$PASS_FILE"
    echo "[*] Verified. Setting new passphrase..."
    python3 "$VAULT_PY" change_passphrase "$PASS_FILE"
    log_action "Passphrase changed"
}

uninstall() {
    echo "[*] Uninstalling vaultpass..."
    if [ -f "$PASS_FILE" ]; then
        read -p "Backup your vault before uninstalling? (Y/n): " b
        [[ "$b" =~ ^[Yy]$ || -z "$b" ]] && backup_passwords
    fi
    read -p "Remove all vaultpass files? (Y/n): " conf
    if [[ "$conf" =~ ^[Yy]$ || -z "$conf" ]]; then
        rm -rf "$INSTALL_DIR"
        rm -f "$BIN_PATH"
        echo "[âœ”] vaultpass and data removed."
        log_action "vaultpass uninstalled"
    else
        echo "Uninstall cancelled."
    fi
    exit 0
}

update_now() {
    check_for_updates
    exit 0
}

# --- Main logic ---

case "$1" in
    -h|--help) show_help ;;
    -a) show_features ;;
    --changelog) show_changelog ;;
    --log) show_log ;;
    --update) update_now ;;
    -b) backup_passwords ;;
    -r) restore_passwords ;;
    -e) edit_entry "$@" ;;
    --change-passphrase) change_passphrase ;;
    -L) require_passphrase_setup; check_for_updates
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        cat -n "$PASS_FILE.tmp"
        rm "$PASS_FILE.tmp"
        log_action "Listed all passwords"
        ;;
    -S) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            entry=$(grep -w "$ID:" "$PASS_FILE.tmp" || echo "ID $ID not found")
            echo "$entry"
            rm "$PASS_FILE.tmp"
            log_action "Searched for $ID"
        done ;;
    -d) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            grep -vw "$ID:" "$PASS_FILE.tmp" > "$PASS_FILE.tmp2"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp2" "$PASS_FILE"
            rm "$PASS_FILE.tmp" "$PASS_FILE.tmp2"
            echo "[âœ”] Deleted $ID."
            log_action "Deleted $ID"
        done ;;
    -l|-s) require_passphrase_setup; check_for_updates; shift
        mode="short"; [ "$1" = "-l" ] && mode="long"
        for ID in "$@"; do
            pwd=$(python3 "$PASSGEN_PY" $mode)
            echo "Password for $ID: $pwd"
            read -p "Enter username/email for $ID (optional): " user
            read -p "Add info/description for $ID (optional): " info
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$pwd|$info" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ”] Saved password for $ID."
            log_action "Saved password for $ID"
        done ;;
    -c) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            read -p "Enter password for $ID: " pwd
            read -p "Enter username/email for $ID (optional): " user
            read -p "Add info/description for $ID (optional): " info
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$pwd|$info" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ”] Saved custom password for $ID."
            log_action "Saved custom password for $ID"
        done ;;
    -u) uninstall ;;
    *) show_help ;;
esac

exit 0