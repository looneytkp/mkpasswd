#!/bin/bash

# ===============================
#           VAULTPASS
# ===============================

INSTALL_DIR="$HOME/.vaultpass"
CORE_DIR="$(dirname "$0")"
PASS_FILE="$INSTALL_DIR/system/passwords.gpg"
HINT_FILE="$INSTALL_DIR/system/passphrase_hint.txt"
LOG_FILE="$INSTALL_DIR/system/vaultpass.log"
CHANGELOG_FILE="$CORE_DIR/../changelog.txt"
VERSION_FILE="$CORE_DIR/../version.txt"
REMOTE_VERSION_URL="https://raw.githubusercontent.com/looneytkp/vaultpass/main/version.txt"
VAULT_PY="$CORE_DIR/vault.py"
PASSGEN_PY="$CORE_DIR/password_gen.py"

[ -f "$VERSION_FILE" ] || echo "v1.6" > "$VERSION_FILE"
VERSION="$(cat "$VERSION_FILE")"

log_action() {
    mkdir -p "$INSTALL_DIR/system"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> "$LOG_FILE"
}

require_passphrase_setup() {
    if [ ! -f "$HINT_FILE" ]; then
        echo "[*] First run: You must set a master passphrase."
        echo "  - This passphrase protects all your saved passwords."
        echo "  - If you forget it, your passwords cannot be recovered."
        read -p "[*] Enter a passphrase hint (for your eyes only, can be blank): " hint
        mkdir -p "$INSTALL_DIR/system"
        echo "$hint" > "$HINT_FILE"
        log_action "Set passphrase hint"
        echo "[*] Passphrase hint saved."
    fi

    if [ -f "$HINT_FILE" ]; then
        echo "ðŸ’¡ Hint: $(cat "$HINT_FILE")"
    fi
}

show_changelog() {
    ver="${1:-$VERSION}"
    ver="${ver#v}"
    echo "[*] Version $ver"
    awk -v ver="$ver" '
        $0 ~ "^Version[[:space:]]*"ver"$" { printing=1; next }
        printing && $0 ~ /^Version[[:space:]]*[0-9]+\.[0-9]+/ { exit }
        printing
    ' "$CHANGELOG_FILE"
    echo "[*] Full changelog: https://github.com/looneytkp/vaultpass"
}

check_for_updates() {
    LAST_UPDATE_FILE="$INSTALL_DIR/system/.last_update_check"
    NEED_UPDATE=0

    if [ -f "$LAST_UPDATE_FILE" ]; then
        last=$(date -r "$LAST_UPDATE_FILE" +%s)
        now=$(date +%s)
        diff=$(( (now - last) / 86400 ))
        [ "$diff" -ge 7 ] && NEED_UPDATE=1
    else
        NEED_UPDATE=1
    fi

    if [ "$NEED_UPDATE" -eq 1 ]; then
        echo "[*] Checking for Vaultpass updates..."
        local_version=$(cat "$VERSION_FILE")
        remote_version=$(curl -fsSL "$REMOTE_VERSION_URL" 2>/dev/null || echo "$local_version")
        if [ "$local_version" != "$remote_version" ]; then
            echo "[!] New version available!"
            echo "[!] Currently installed: $local_version"
            echo "[!] Latest: $remote_version"
            echo "[*] Changelog for latest version:"
            show_changelog "$remote_version"
            read -p "[?] Do you want to update now? (Y/n): " u
            if [[ "$u" =~ ^[Yy]$ || -z "$u" ]]; then
                echo "[*] Updating Vaultpassâ€¦"
                (cd "$CORE_DIR/.." && git pull origin main > /dev/null 2>&1)
                echo "$remote_version" > "$VERSION_FILE"
                echo "[âœ“] Vaultpass updated to $remote_version."
                log_action "Vaultpass updated to $remote_version"
            fi
        else
            echo "[âœ“] Vaultpass is up to date."
        fi
        touch "$LAST_UPDATE_FILE"
    fi
}

show_help() {
    echo "Vaultpass - Secure Password Manager $VERSION"
    cat <<EOF
Usage: vaultpass [OPTIONS]
Options:
  -l, --long [ID ...]        Generate long password(s)
  -s, --short [ID ...]       Generate short password(s)
  -c, --custom [ID ...]      Save custom password(s)
  -L, --list                 List all saved passwords
  -S, --search [ID ...]      Search for passwords by ID
  -d, --delete [ID ...]      Delete password(s) by ID
  -e, --edit [ID]            Edit username/email
  --change-passphrase        Change master passphrase
  -b, --backup               Backup passwords
  -r, --restore              Restore from backup
  --log                      Show action log
  -u, --uninstall            Uninstall Vaultpass (nukes everything!)
  --update                   Check for updates now
  -a, --about                Show all features
  -h, --help                 Show this help
  --changelog                Show latest changelog
EOF
}

show_features() {
    cat <<EOF
Vaultpass Functions:
- Generate secure passwords (short, long, or custom)
- Save username/email with each password
- Add optional 'info' field (e.g. what the password is for)
- View, search, delete, or edit saved passwords
- Backup and restore encrypted vaults
- more features coming soon
EOF
}

show_log() {
    cat "$LOG_FILE"
}

backup_passwords() {
    require_passphrase_setup
    mkdir -p "$INSTALL_DIR/backup"
    cp "$PASS_FILE" "$INSTALL_DIR/backup/passwords_$(date +%Y%m%d_%H%M%S).gpg"
    cp "$HINT_FILE" "$INSTALL_DIR/backup/passphrase_hint.txt"
    echo "[âœ“] Backup saved to $INSTALL_DIR/backup"
    log_action "Vault backup"
}

restore_passwords() {
    require_passphrase_setup
    echo "[*] Backups found:"
    backups=$(ls "$INSTALL_DIR/backup"/*.gpg 2>/dev/null)
    if [ -z "$backups" ]; then
        echo "[!] No backups found."
        return
    fi
    for f in $backups; do
        echo "     - $(basename "$f")"
    done
    read -p "[?] Enter backup filename to restore: " f
    cp "$INSTALL_DIR/backup/$f" "$PASS_FILE"
    [ -f "$INSTALL_DIR/backup/passphrase_hint.txt" ] && cp "$INSTALL_DIR/backup/passphrase_hint.txt" "$HINT_FILE"
    echo "[âœ“] Restored Vaultpass vault from backup."
    log_action "Vault restored from $f"
}

edit_entry() {
    require_passphrase_setup
    ID="$2"
    [ -z "$ID" ] && echo "Usage: vaultpass -e ID" && exit 1
    python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
    if grep -qw "$ID:" "$PASS_FILE.tmp"; then
        entry=$(grep -w "$ID:" "$PASS_FILE.tmp")
        old_user=$(echo "$entry" | awk -F'|' '{print $2}')
        echo "[?] Current username/email: $old_user"
        read -p "[?] Enter new username/email: " new_user
        sed -i "s|^$ID:[^|]*|$ID:|$new_user|" "$PASS_FILE.tmp"
        python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
        rm "$PASS_FILE.tmp"
        echo "[âœ“] Username/email updated for $ID."
        log_action "Edited entry for $ID"
    else
        echo "[X] ID not found"
        rm "$PASS_FILE.tmp"
    fi
}

change_passphrase() {
    require_passphrase_setup
    echo "[?] To change passphrase, enter current passphrase: "
    python3 "$VAULT_PY" verify "$PASS_FILE"
    if [ $? -eq 0 ]; then
        echo "[âœ“] Verified."
        while true; do
            read -s -p "[?] Set new passphrase: " new1; echo
            read -s -p "[?] Verify new passphrase: " new2; echo
            if [ "$new1" = "$new2" ]; then
                echo "$new1" | python3 "$VAULT_PY" change_passphrase "$PASS_FILE"
                if [ $? -eq 0 ]; then
                    echo "[âœ“] New passphrase set."
                    log_action "Passphrase changed"
                else
                    echo "[X] Failed to set new passphrase!"
                fi
                break
            else
                echo "[X] Passphrase does not match!"
            fi
        done
    else
        echo "[X] Invalid passphrase. Try again."
    fi
}

update_now() {
    check_for_updates
    exit 0
}

# Main logic

case "$1" in
    -h|--help) show_help ;;
    -a|--about) show_features ;;
    --changelog) show_changelog ;;
    --log) show_log ;;
    --update) update_now ;;
    -b|--backup) backup_passwords ;;
    -r|--restore) restore_passwords ;;
    -e|--edit) edit_entry "$@" ;;
    --change-passphrase) change_passphrase ;;
    -L|--list) require_passphrase_setup; check_for_updates
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
        while IFS= read -r line; do
            echo "[âœ“] $line"
        done < "$PASS_FILE.tmp"
        rm "$PASS_FILE.tmp"
        log_action "Listed all passwords"
        ;;
    -S|--search) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            entry=$(grep -w "$ID:" "$PASS_FILE.tmp" || echo "[X] ID $ID not found")
            echo "[âœ“] $entry"
            rm "$PASS_FILE.tmp"
            log_action "Searched for $ID"
        done ;;
    -d|--delete) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            grep -vw "$ID:" "$PASS_FILE.tmp" > "$PASS_FILE.tmp2"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp2" "$PASS_FILE"
            rm "$PASS_FILE.tmp" "$PASS_FILE.tmp2"
            echo "[âœ“] Deleted $ID."
            log_action "Deleted $ID"
        done ;;
    -l|--long|-s|--short) require_passphrase_setup; check_for_updates; shift
        mode="short"; [ "$1" = "-l" ] || [ "$1" = "--long" ] && mode="long"
        for ID in "$@"; do
            pwd=$(python3 "$PASSGEN_PY" $mode)
            echo "[?] Password for $ID: $pwd"
            read -p "[?] Enter username/email for $ID (optional): " user
            read -p "[?] Add info/description for $ID (optional): " info
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$pwd|$info" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ“] Saved password for $ID."
            log_action "Saved password for $ID"
        done ;;
    -c|--custom) require_passphrase_setup; check_for_updates; shift
        for ID in "$@"; do
            read -p "[?] Enter password for $ID: " pwd
            read -p "[?] Enter username/email for $ID (optional): " user
            read -p "[?] Add info/description for $ID (optional): " info
            python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.tmp"
            echo "$ID:|$user|$pwd|$info" >> "$PASS_FILE.tmp"
            python3 "$VAULT_PY" encrypt "$PASS_FILE.tmp" "$PASS_FILE"
            rm "$PASS_FILE.tmp"
            echo "[âœ“] Saved custom password for $ID."
            log_action "Saved custom password for $ID"
        done ;;
    -u|--uninstall)
        UNINSTALL_SCRIPT="$INSTALL_DIR/install/uninstall.sh"
        if [ -f "$UNINSTALL_SCRIPT" ]; then
            bash "$UNINSTALL_SCRIPT"
        else
            echo "[X] Uninstaller not found. Please re-clone the repo or delete Vaultpass manually."
        fi
        exit 0
        ;;
    *) show_help ;;
esac

exit 0