#!/bin/bash
# mkpasswd - Password manager v1.3
# Author: looneytkp

set -e

# Styling
NC='\033[0m'; GREEN='\033[1;32m'; RED='\033[1;31m'; YELLOW='\033[1;33m'; BOLD='\033[1m'

# Paths
MKPASSWD_DIR="$HOME/.mkpasswd"
CORE_DIR="$MKPASSWD_DIR/core"
SYSTEM_DIR="$MKPASSWD_DIR/system"
BACKUP_DIR="$MKPASSWD_DIR/backup"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
VERSION_FILE="$SYSTEM_DIR/version.txt"
CHANGELOG_FILE="$CORE_DIR/changelog.txt"
LOG_FILE="$SYSTEM_DIR/mkpasswd.log"

# Load current version
VERSION=$(cat "$VERSION_FILE" 2>/dev/null || echo "0.0")

# Logging function
log_action() {
  local action="$1"
  local detail="$2"
  echo "$(date '+%Y-%m-%d %H:%M:%S') | $action | $detail" >> "$LOG_FILE"
}

# GPG Encryption (for backups)
gpg_encrypt() {
  local src="$1"
  local dest="$2"
  local passphrase
  echo -n "Enter passphrase to encrypt backup: "
  read -s passphrase
  echo
  echo "$passphrase" | gpg --batch --yes --passphrase-fd 0 -c -o "$dest" "$src"
}

gpg_decrypt() {
  local src="$1"
  local dest="$2"
  local passphrase
  echo -n "Enter passphrase to decrypt backup: "
  read -s passphrase
  echo
  echo "$passphrase" | gpg --batch --yes --passphrase-fd 0 -d -o "$dest" "$src"
}

first_run_notice() {
  echo -e "${YELLOW}[!]${NC} This tool encrypts your passwords with a passphrase."
  echo -e "${YELLOW}[!]${NC} If you forget it, you won't be able to recover your passwords."
  echo -n "Enter a hint to help you remember your passphrase: "
  read hint
  echo "$hint" > "$HINT_FILE"
}

show_hint() {
  if [ -f "$HINT_FILE" ]; then
    echo -e "\nðŸ’¡ ${BOLD}Hint:${NC} $(cat "$HINT_FILE")\n"
  fi
}

# File check and reinstall prompt
check_files() {
  REQUIRED_FILES=(
    "$PASS_FILE"
    "$HINT_FILE"
    "$VERSION_FILE"
    "$CHANGELOG_FILE"
  )
  for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
      echo -e "${RED}[X]${NC} Missing file: $file"
      echo -ne "${YELLOW}[!]${NC} Missing file detected. Reinstall now? (Y/n): "
      read reply
      if [[ "$reply" =~ ^[Yy]$ || -z "$reply" ]]; then
        bash <(curl -s https://raw.githubusercontent.com/looneytkp/mkpasswd/main/install/install.sh)
        exit
      else
        echo -e "${RED}[X]${NC} mkpasswd cannot run with missing files. Exiting."
        exit 1
      fi
    fi
  done
}
# Weekly update check
check_for_updates() {
  LAST_CHECK_FILE="$SYSTEM_DIR/last_check.txt"
  NOW=$(date +%s)
  if [ -f "$LAST_CHECK_FILE" ]; then
    LAST_CHECK=$(cat "$LAST_CHECK_FILE")
    DIFF=$(( (NOW - LAST_CHECK) / 86400 ))
    if [ "$DIFF" -lt 7 ]; then return; fi
  fi

  echo "$NOW" > "$LAST_CHECK_FILE"
  REMOTE_VERSION=$(curl -s https://raw.githubusercontent.com/looneytkp/mkpasswd/main/system/version.txt)
  if [[ "$REMOTE_VERSION" != "$VERSION" ]]; then
    echo -e "\n${YELLOW}[!] New version available: $REMOTE_VERSION${NC}"
    echo -e "${YELLOW}[!] Currently installed: $VERSION${NC}"
    echo -e "\n--- CHANGELOG ---"
    curl -s https://raw.githubusercontent.com/looneytkp/mkpasswd/main/core/changelog.txt | sed -n "/Version $REMOTE_VERSION/,/^$/p"
    echo -ne "\nDo you want to update now? (Y/n): "
    read answer
    if [[ "$answer" =~ ^[Yy]$ || -z "$answer" ]]; then
      bash <(curl -s https://raw.githubusercontent.com/looneytkp/mkpasswd/main/install/install.sh)
      exit
    fi
  fi
}

# --- Backup system ---

# Create backup
create_backup() {
  mkdir -p "$BACKUP_DIR"
  BACKUP_TIME=$(date +%Y%m%d_%H%M%S)
  BACKUP_PATH="$BACKUP_DIR/passwords_${BACKUP_TIME}.gpg"
  echo -n "Do you want to encrypt this backup with GPG? (Y/n): "
  read enc
  if [[ "$enc" =~ ^[Yy]$ || -z "$enc" ]]; then
    gpg_encrypt "$PASS_FILE" "$BACKUP_PATH.gpg"
    log_action "BACKUP" "Encrypted backup created: $BACKUP_PATH.gpg"
    echo "[âœ”] Encrypted backup saved as $BACKUP_PATH.gpg"
  else
    cp "$PASS_FILE" "$BACKUP_PATH"
    log_action "BACKUP" "Plain backup created: $BACKUP_PATH"
    echo "[âœ”] Backup saved as $BACKUP_PATH"
  fi
}

# List backups
list_backups() {
  if [ ! -d "$BACKUP_DIR" ]; then
    echo "No backups found."
    return
  fi
  ls -1 "$BACKUP_DIR"
}

# Restore backup
restore_backup() {
  if [ ! -d "$BACKUP_DIR" ]; then
    echo "No backups to restore."
    return
  fi
  echo "Available backups:"
  ls -1 "$BACKUP_DIR"
  echo -n "Enter backup filename to restore (leave empty to cancel): "
  read bfile
  if [ -z "$bfile" ]; then
    echo "Restore cancelled."
    return
  fi
  FULL_PATH="$BACKUP_DIR/$bfile"
  if [[ "$bfile" == *.gpg ]]; then
    gpg_decrypt "$FULL_PATH" "$PASS_FILE"
    log_action "RESTORE" "Restored GPG backup: $bfile"
  else
    cp "$FULL_PATH" "$PASS_FILE"
    log_action "RESTORE" "Restored plain backup: $bfile"
  fi
  echo "[âœ”] Passwords restored from $bfile"
}
# --- Logging viewer ---
show_log() {
  if [ ! -f "$LOG_FILE" ]; then
    echo "No log entries yet."
    return
  fi
  echo -e "\n${BOLD}mkpasswd Log:${NC}\n"
  cat "$LOG_FILE"
  echo
}

# --- Multi-ID/Username/Email Update Logic ---

multi_id_prompt() {
  local id="$1"
  local username="$2"
  local password="$3"
  # Check for existing entries
  local entries
  entries=$(grep -in "^$id" "$PASS_FILE" || true)
  if [ ! -z "$entries" ]; then
    echo -e "[!] An entry for ID '$id' exists:"
    echo "$entries"
    echo -n "Add another (a), Replace (r), or Cancel (c)? (a/r/c): "
    read opt
    case "$opt" in
      a|A)
        count=$(grep -ic "^${id}_" "$PASS_FILE")
        next_num=$((count + 1))
        id="${id}_$next_num"
        ;;
      r|R)
        sed -i "/^$id/d" "$PASS_FILE"
        log_action "REPLACE" "Replaced $id"
        ;;
      c|C|*)
        echo "Cancelled."
        return
        ;;
    esac
  fi
  echo "${id} | user: ${username} | pass: ${password} | added: $(date '+%Y-%m-%d %H:%M')" >> "$PASS_FILE"
  log_action "SAVE" "Saved new password for $id"
  echo "[âœ”] Password saved for $id"
}

update_username() {
  local id="$1"
  local new_user="$2"
  if grep -q "^$id" "$PASS_FILE"; then
    sed -i "s/^$id | user: .*/$id | user: $new_user | pass: $(grep "^$id" "$PASS_FILE" | awk -F'|' '{print $3}' | xargs) | added: $(date '+%Y-%m-%d %H:%M')/" "$PASS_FILE"
    log_action "UPDATE_USER" "Updated username for $id"
    echo "[âœ”] Username/email updated for $id"
  else
    echo "[X] No entry found for $id"
  fi
}
# --- Expanded Help ---
show_help() {
  echo -e "\n${BOLD}mkpasswd${NC} - Password Manager (v$VERSION)"
  echo -e "Usage: mkpasswd [OPTION] [ARGS]\n"
  echo -e "Options:"
  echo -e "  -l [ID] [USER]         Generate long password, save to ID (with username/email optional)"
  echo -e "  -s [ID] [USER]         Generate short password, save to ID (with username/email optional)"
  echo -e "  -c [ID] [USER] [PASS]  Save custom password"
  echo -e "  -L                     List all saved entries"
  echo -e "  -S [TERM]              Search for IDs/usernames/emails"
  echo -e "  -d [ID]                Delete entry for ID"
  echo -e "  -U [ID] [USER]         Update username/email for ID"
  echo -e "  --log                  Show log entries"
  echo -e "  --backup               Manually backup the vault"
  echo -e "  --restore              Restore from backup"
  echo -e "  --list-backups         List available backups"
  echo -e "  -u                     Uninstall mkpasswd"
  echo -e "  -C                     View changelog"
  echo -e "  -h, --help             Show this help"
  echo
  exit
}

# --- Command Dispatcher (main logic) ---
handle_option() {
  case "$1" in
    -l)
      # Long password: mkpasswd -l [ID] [USERNAME]
      id="$2"
      user="$3"
      password=$(python3 "$CORE_DIR/password_gen.py" 20)
      multi_id_prompt "$id" "$user" "$password"
      ;;
    -s)
      # Short password: mkpasswd -s [ID] [USERNAME]
      id="$2"
      user="$3"
      password=$(python3 "$CORE_DIR/password_gen.py" 8)
      multi_id_prompt "$id" "$user" "$password"
      ;;
    -c)
      # Custom password: mkpasswd -c [ID] [USERNAME] [PASS]
      id="$2"
      user="$3"
      password="$4"
      multi_id_prompt "$id" "$user" "$password"
      ;;
    -L)
      nl -ba "$PASS_FILE"
      ;;
    -S)
      term="$2"
      grep -i "$term" "$PASS_FILE" || echo "No entries found."
      ;;
    -d)
      id="$2"
      sed -i "/^$id/d" "$PASS_FILE"
      log_action "DELETE" "Deleted entry for $id"
      echo "[âœ”] Deleted entry for $id"
      ;;
    -U)
      id="$2"
      new_user="$3"
      update_username "$id" "$new_user"
      ;;
    --log)
      show_log
      ;;
    --backup)
      create_backup
      ;;
    --restore)
      restore_backup
      ;;
    --list-backups)
      list_backups
      ;;
    -u)
      bash "$MKPASSWD_DIR/install/uninstall.sh"
      ;;
    -C)
      cat "$CHANGELOG_FILE"
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "[!] Unknown option: $1"; show_help;;
  esac
}

# --- Main ---
mkdir -p "$MKPASSWD_DIR/system" "$BACKUP_DIR"
check_files
check_for_updates

if [ ! -f "$HINT_FILE" ]; then
  first_run_notice
fi

show_hint

if [ $# -eq 0 ]; then
  show_help
fi

handle_option "$@"
