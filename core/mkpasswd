#!/bin/bash
set -e

MKPASSWD_DIR="$(cd "$(dirname "$0")/../" && pwd)"
SYSTEM_DIR="$MKPASSWD_DIR/system"
BACKUP_DIR="$MKPASSWD_DIR/backup"
LOG_FILE="$SYSTEM_DIR/mkpasswd.log"
PASS_FILE="$SYSTEM_DIR/passwords.gpg"
HINT_FILE="$SYSTEM_DIR/passphrase_hint.txt"
CHANGELOG="$MKPASSWD_DIR/core/changelog.txt"

# Python helpers
VAULT_PY="$MKPASSWD_DIR/core/vault.py"
PASSGEN_PY="$MKPASSWD_DIR/core/password_gen.py"

# --- Update Function ---
update_mkpasswd() {
    cd "$MKPASSWD_DIR" || exit 1

    if [ ! -d .git ]; then
        echo "[X] Cannot update: .git directory not found (not a git install)."
        exit 1
    fi

    git fetch origin main >/dev/null 2>&1
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})

    if [ "$LOCAL" != "$REMOTE" ]; then
        echo "[!] New version available:"
        git log --oneline HEAD..origin/main
        read -p "Do you want to update now? (Y/n): " answer
        if [[ "$answer" =~ ^[Yy]$ || -z "$answer" ]]; then
            git pull origin main
            echo "[✔] mkpasswd updated!"
        else
            echo "Update cancelled."
        fi
    else
        echo "[*] mkpasswd is already up to date."
    fi
    exit 0
}

# --- Option Parsing (for --update) ---
if [[ "$1" == "--update" ]]; then
    update_mkpasswd
fi

# --- Helper Functions ---
log_action() {
    local action="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $action" >> "$LOG_FILE"
}

show_help() {
    cat <<EOF
mkpasswd (v1.4) - Terminal Password Manager

Usage: mkpasswd [OPTION]... [ARGS]...

Options:
  -l [ID] [USER]     Generate a long password for ID (and optional username/email)
  -s [ID] [USER]     Generate a short password
  -c [ID] [USER] [PASS] Save a custom password
  -L                 List all entries
  -S [TERM]          Search for ID, username, or email
  -d [ID]            Delete an entry
  -U [ID] [USER]     Update username/email for an entry
  --backup           Backup your vault (manual)
  --restore          Restore vault from backup
  --log              Show action log
  -u                 Uninstall mkpasswd (with backup prompt)
  -C                 Show changelog
  -h, --help         Show this help
  --update           Check for updates and update mkpasswd

EOF
}

show_changelog() {
    if [ -f "$CHANGELOG" ]; then
        cat "$CHANGELOG"
    else
        echo "[!] Changelog not found."
    fi
}

ensure_files() {
    mkdir -p "$SYSTEM_DIR" "$BACKUP_DIR"
    touch "$PASS_FILE" "$LOG_FILE"
    [ ! -f "$HINT_FILE" ] && touch "$HINT_FILE"
}

decrypt_vault() {
    if [ -s "$PASS_FILE" ]; then
        python3 "$VAULT_PY" decrypt "$PASS_FILE" "$PASS_FILE.plain"
    else
        touch "$PASS_FILE.plain"
    fi
}

encrypt_vault() {
    python3 "$VAULT_PY" encrypt "$PASS_FILE.plain" "$PASS_FILE"
    rm -f "$PASS_FILE.plain"
}

# --- First Run: Passphrase caution and hint ---
if [ ! -s "$HINT_FILE" ]; then
    echo "⚠️  Important: Your vault is encrypted with a passphrase you choose. If you forget it, you cannot recover your passwords!"
    read -p "Optionally, add a passphrase hint (or leave blank): " passhint
    echo "$passhint" > "$HINT_FILE"
fi

if [ -f "$HINT_FILE" ] && [ -s "$HINT_FILE" ]; then
    echo "💡 Hint: $(cat "$HINT_FILE")"
fi

ensure_files

# --- Handle commands ---

case "$1" in
    -h|--help|"") show_help; exit 0 ;;
    -C) show_changelog; exit 0 ;;
    --log) cat "$LOG_FILE"; exit 0 ;;
    --backup)
        ts=$(date +%Y%m%d_%H%M%S)
        cp "$PASS_FILE" "$BACKUP_DIR/passwords_$ts.gpg"
        echo "[✔] Backup saved as $BACKUP_DIR/passwords_$ts.gpg"
        log_action "Backup created"
        exit 0
        ;;
    --restore)
        echo "Available backups:"
        ls "$BACKUP_DIR"
        read -p "Enter filename to restore: " bfile
        if [ -f "$BACKUP_DIR/$bfile" ]; then
            cp "$BACKUP_DIR/$bfile" "$PASS_FILE"
            echo "[✔] Vault restored from backup."
            log_action "Vault restored from $bfile"
        else
            echo "[X] Backup file not found."
        fi
        exit 0
        ;;
    --update)
        update_mkpasswd
        ;;
    -L)
        decrypt_vault
        echo "ID | USERNAME/EMAIL | PASSWORD"
        [ -f "$PASS_FILE.plain" ] && cat "$PASS_FILE.plain" || echo "(No entries yet)"
        log_action "Listed all passwords"
        rm -f "$PASS_FILE.plain"
        exit 0
        ;;
    -S)
        decrypt_vault
        term="$2"
        [ -z "$term" ] && read -p "Search for: " term
        grep -i --color=always "$term" "$PASS_FILE.plain" || echo "No matches found."
        log_action "Searched for $term"
        rm -f "$PASS_FILE.plain"
        exit 0
        ;;
    -d)
        decrypt_vault
        id="$2"
        [ -z "$id" ] && read -p "ID to delete: " id
        grep -v "^$id:" "$PASS_FILE.plain" > "$PASS_FILE.plain.tmp" && mv "$PASS_FILE.plain.tmp" "$PASS_FILE.plain"
        encrypt_vault
        echo "[✔] Deleted entry for $id."
        log_action "Deleted entry $id"
        exit 0
        ;;
    -U)
        decrypt_vault
        id="$2"
        [ -z "$id" ] && read -p "ID to update: " id
        [ -z "$3" ] && read -p "New username/email: " user || user="$3"
        awk -F: -v id="$id" -v user="$user" 'BEGIN{OFS=":"} $1==id{$2=user} 1' "$PASS_FILE.plain" > "$PASS_FILE.plain.tmp"
        mv "$PASS_FILE.plain.tmp" "$PASS_FILE.plain"
        encrypt_vault
        echo "[✔] Updated username/email for $id."
        log_action "Updated username/email for $id"
        exit 0
        ;;
    -l|-s)
        decrypt_vault
        id="$2"
        user="$3"
        if [ "$1" = "-l" ]; then
            pw=$(python3 "$PASSGEN_PY" long)
        else
            pw=$(python3 "$PASSGEN_PY" short)
        fi
        # Multi-ID support
        if grep -q "^$id:" "$PASS_FILE.plain"; then
            n=1
            while grep -q "^${id}_$n:" "$PASS_FILE.plain"; do
                ((n++))
            done
            id="${id}_$n"
        fi
        echo "$id:$user:$pw" >> "$PASS_FILE.plain"
        encrypt_vault
        echo "[✔] Saved: $id | $user | $pw"
        log_action "Generated password for $id"
        exit 0
        ;;
    -c)
        decrypt_vault
        id="$2"
        user="$3"
        pw="$4"
        if [ -z "$pw" ]; then
            read -sp "Enter custom password: " pw; echo
        fi
        echo "$id:$user:$pw" >> "$PASS_FILE.plain"
        encrypt_vault
        echo "[✔] Saved: $id | $user | $pw"
        log_action "Saved custom password for $id"
        exit 0
        ;;
    -u)
        read -p "Do you want to backup your vault before uninstalling? (Y/n): " answer
        if [[ "$answer" =~ ^[Yy]$ || -z "$answer" ]]; then
            ts=$(date +%Y%m%d_%H%M%S)
            cp "$PASS_FILE" "$BACKUP_DIR/passwords_uninstall_$ts.gpg"
            echo "[✔] Passwords backed up to $BACKUP_DIR/passwords_uninstall_$ts.gpg"
        fi
        rm -rf "$MKPASSWD_DIR"
        rm -f "$HOME/.local/bin/mkpasswd"
        echo "[✔] mkpasswd uninstalled."
        log_action "Uninstalled mkpasswd"
        exit 0
        ;;
    *)
        show_help
        exit 1
        ;;
esac